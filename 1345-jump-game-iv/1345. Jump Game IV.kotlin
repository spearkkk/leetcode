class Solution {
    /**
     * i에서 점프할 수 있는 곳은 i - 1, i + 1, 그리고 arr[i]와 같은 값을 가진 모든 인덱스들이다.
     * 다만, arr의 범위를 벗어날 수는 없다.
     *
     * 여기서 arr.length - 1, 마지막까지 도달할 수 있는 최소 점프 수를 구해야한다.
     * 
     * ---
     * 
     * arr[i]와 같은 값을 가진 인덱스들을 i를 처리할 때마다 찾아서 넣으면 타임 초과로 해결할 수 없다.
     * arr에 있는 모든 값마다 인덱스들을 map에 저장해놓고 이를 사용한다.
     * map에 arr[i]와 같은 값을 가진 인덱스들을 찾아서 다음에 처리할 수 있도록 넣고, map에서는 제거한다.
     * 
     * 같은 값을 가지지 않았더라도 i - 1, i + 1에서 중복처리할 수 있으니 visited로 마킹한다.
     */
    fun minJumps(arr: IntArray): Int {
        var count = 0 // bfs depth
        val holder = mutableListOf(0) // current indices for current bfs depth
        val anotherHolder = mutableListOf<Int>() // next indices for next bfs depth

        val visited = BooleanArray(arr.size)
        
        val valueToIndices = mutableMapOf<Int, MutableSet<Int>>()
        for (i in arr.indices)  {
            valueToIndices.computeIfAbsent(arr[i]) { mutableSetOf() }.add(i)
        }

        while (true) {
            // move to next depth
            if (holder.isEmpty()) {
                if (anotherHolder.isNotEmpty())  {
                    holder.addAll(anotherHolder)
                    anotherHolder.clear()
                    count += 1
                    continue
                } else {
                    break
                }
            }

            val current = holder.removeFirst()

            if (current == arr.size - 1) {
                return count
            }
            visited[current] = true

            if (current - 1 >= 0 && !visited[current - 1]) {
                anotherHolder.add(current - 1)
            }
            if (current + 1 < arr.size && !visited[current + 1]) {
                anotherHolder.add(current + 1)
            }

            if (valueToIndices.contains(arr[current])) {
                anotherHolder.addAll(valueToIndices[arr[current]]!!)
                valueToIndices.remove(arr[current])
            }
        }

        return -1
    }
}