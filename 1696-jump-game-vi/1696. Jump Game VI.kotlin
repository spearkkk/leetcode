class Solution {
    /**
     * dp[i]: i 위치에서 가질 수 있는 최대 점수
     * dp[i] = max(dp[i - 1], dp[i + 2], ..., dp[i - k]) + nums[i]
     */
    fun maxResult(nums: IntArray, k: Int): Int {
        val dp = IntArray(nums.size) { -10_000 * 100_000 - 1}
        dp[nums.size - 1] = nums.last()

        val maxHeap = java.util.PriorityQueue<Pair<Int, Int>>(compareBy { -it.first })

        for (i in nums.size - 2 downTo 0) {
            // add i + 1
            // remove i + k + 1
            maxHeap.add(Pair(dp[i + 1], i + 1))
            while (maxHeap.peek().second > i + k) {
                maxHeap.poll()
            }
            dp[i] = nums[i] + maxHeap.peek().first
        }
        return dp[0]
    }
}