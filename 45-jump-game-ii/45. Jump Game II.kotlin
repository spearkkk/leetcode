class Solution {
    fun jump(nums: IntArray): Int {
        val dp = IntArray(nums.size) { 0 }
        fun doJumping(k: Int): Int {
            // k가 0보다 작아지면, 0번째 인덱스까지 다 확인한 것이기 때문에 dp[0]을 반환한다.
            // k가 0보다 작다는 것은 이미 0번째 인덱스까지 다 확인했다는 것이다.
            if (k < 0) {
                return dp[0]
            }

            // k번째 인덱스에서 점프할 수 있는 최대 거리
            val available: Int = nums[k]

            if (available == 0)  {
                // 점프할 수 있는 거리가 0이면, 이동할 수 없는 지점이기 때문에 최댓값으로 설정한다.
                dp[k] = 10001
                return doJumping(k - 1)
            }

            if ((k + available) >= nums.size - 1)  {
                // k번째 인덱스에서 점프할 수 있는 거리가 마지막 인덱스까지 갈 수 있는 거리보다 크거나 같으면, 1로 설정한다.
                // 한번 점프해서 갈 수 있다.
                dp[k] = 1
            } else {
                // 한번 점프로 갈 수 없다면 k위치에서 점프했을 때의 갈 수 있는 지점에서의 최솟 값을 찾는다.
                // k + 1 .. k + available: k에서 점프할 수 있는 거리만큼의 범위를 만든다. 이를 t라고 하자.
                // 이미 dp[t]는 앞 단계에서 처리했으므로 최솟값이라는 것을 알 수 있다.
                // 그러니깐 dp[t] 값들 중에 최솟값을 선택하면 된다.
                // 왜냐하면 확인하는 순서가 nums.size - 2부터 0번째까지이기 때문이다.
                dp[k] = ((1 .. available).map { k + it }.filter { it <= dp.size - 1 }.map { dp[it] }.minOrNull() ?: 10001) + 1
            }

            return doJumping(k - 1)
        }

        // nums.size - 2: 마지막 인덱스는 도착지점이기 때문에 확인하지 않는다.
        // nums.size -2부터 0번째 인덱스까지 확인한다.
        return doJumping(nums.size - 2)
    }
}
