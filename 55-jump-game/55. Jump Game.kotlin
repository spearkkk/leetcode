class Solution {
    fun canJump(nums: IntArray): Boolean {
        // k 번째 인덱스를 이미 검증 했다면 다시 한번 검증할 필요가 없으므로
        // 검증을 했다는 것을 마킹한다.
        val marked = IntArray(nums.size) { 0 }

        fun canPass(index: Int): Boolean {
            // index 위치에서 nums[index] 만큼 점프할 수 있다.
            // 점프할 결과가 끝보다 크거나 같다면 끝에 도달할 수 있다.
            return index + nums[index] >= nums.size - 1
        }

        fun trying(index: Int): Boolean {
            if (marked[index] == 1) {
                // 점프로 끝에 도달했으면 이미 true로 끝나서 종료가 되었어야 함.
                // 그런데 마킹한 곳에 다시 도착했다는 것은 점프로 못간다는 뜻.
                return false
            }

            if (canPass(index)) {
                // 점프로 끝에 도달하면 바로 끝을 낸다.
                return true
            }

            marked[index] = 1

            // 도달하지 못했으니 1부터 nums[index] 크기만큼 점프해보자
            for (k in 1 .. nums[index]) {
                if (trying(index + k)) {
                    return true
                }
            }
            return false
        }

        return trying(0)
    }
}